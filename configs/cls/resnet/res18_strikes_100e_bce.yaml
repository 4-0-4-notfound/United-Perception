num_classes: &num_classes 1000

cutmix_mixup: &cutmix_mixup
  type: torch_cutmix_mixup
  kwargs:
    mixup_alpha: 0.1
    cutmix_alpha: 1.0
    num_classes: 1000
    extra_input: True

random_resized_crop: &random_resized_crop
 type: torch_random_resized_crop
 kwargs:
   size: 224
   scale: [0.08, 1]

random_horizontal_flip: &random_horizontal_flip
 type: torch_random_horizontal_flip

pil_color_jitter: &pil_color_jitter
 type: torch_color_jitter
 kwargs:
  brightness: 0.4
  contrast: 0.4
  saturation: 0.4

center_crop: &center_crop
  type: torch_center_crop
  kwargs:
    size: 224

torch_size: &torch_resize
  type: torch_resize
  kwargs:
    size: 256

to_tensor: &to_tensor
  type: to_tensor

normalize: &normalize
 type: normalize
 kwargs:
   mean: [0.485, 0.456, 0.406] # ImageNet pretrained statics
   std: [0.229, 0.224, 0.225]

dataset: # Required.
  train:
    dataset:
      type: cls
      kwargs:
        meta_file: /mnt/lustre/share/images/meta/train.txt
        image_reader:
          type: ceph_opencv
          kwargs:
            image_dir: ceph-sh1424-det:s3://det.acedimic/images_1k/train
            color_mode: RGB
            memcached: false
        transformer: [*random_resized_crop, *random_horizontal_flip, *pil_color_jitter, *to_tensor, *normalize, *cutmix_mixup]
    batch_sampler:
        type: base
        kwargs:
          sampler:
            type: dist
            kwargs: {}
          batch_size: 64
    dataloader:
        type: cls_base
        kwargs:
          num_workers: 12
          pin_memory: True
  test:
    dataset:
      type: cls
      kwargs:
        meta_file: /mnt/lustre/share/images/meta/val.txt
        image_reader:
          type: ceph_opencv
          kwargs:
            image_dir: ceph-sh1424-det:s3://det.acedimic/images_1k/val
            color_mode: RGB
            memcached: false
        transformer: [*torch_resize, *center_crop, *to_tensor, *normalize]
        evaluator:
          type: imagenet               # choices = {'COCO', 'VOC', 'MR'}
          kwargs:
             topk: [1, 5]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 64
    dataloader:
      type: cls_base
      kwargs:
        num_workers: 12
        pin_memory: False

ema:
    enable: True
    kwargs:
        decay: 0.9999

trainer: # Required.
  max_epoch: 100
  test_freq: 5
  save_freq: 5
  only_save_latest: True
  optimizer:                 # optimizer = SGD(params,lr=0.001,momentum=0.9,weight_decay=0.0001)
    type: LAMB
    kwargs:
      lr: 0.008
      weight_decay: 0.02
  lr_scheduler:
    warmup_iter: 3130
    warmup_type: linear
    warmup_register_type: no_scale_lr
    warmup_ratio: 0.02
    type: CosineAnnealingLR
    kwargs:
        T_max: 100
        eta_min: 0.0
        warmup_iter: 3130
saver: # Required.
  save_dir: res18_100e_strikes_bce/checkpoints/cls_std     # dir to save checkpoints
  results_dir: res18_100e_strikes_bce/results_dir/cls_std  # dir to save detection results. i.e., bboxes, masks, keypoints
  auto_resume: True  # find last checkpoint from save_dir and resume from it automatically
                     # this option has the highest priority (auto_resume > opts > resume_model > pretrain_model)

hooks:
  - type: auto_save_best

net: &subnet
  - name: backbone              # backbone = resnet50(frozen_layers, out_layers, out_strides)
    type: resnet18
    kwargs:
      frozen_layers: []
      out_layers: [4]     # layer1...4, commonly named Conv2...5
      out_strides: [32]  # tell the strides of output features
      normalize:
        type: solo_bn
      initializer:
        method: msra
  - name: head
    type: base_cls_head
    kwargs:
       num_classes: *num_classes
       in_plane: &head_out_channel 512
       input_feature_idx: -1
  - name: post_process
    type: base_cls_postprocess
    kwargs:
       cls_loss:
         type: bce
         kwargs:
           {}