num_classes: &num_classes 81
runtime:
  fp16: false
  aligned: true
  async_norm: false
  special_bn_init: true
  loss_backward_scale: true
  rank_init: true
  task_names: det
  inferencer:
    type: base
    kwargs:
      visualizer:
        type: plt
        kwargs:
          thresh: 0.5

mosaic: &mosaic
  type: mosaic
  kwargs:
    extra_input: true
    tar_size: 640
    fill_color: 114

random_perspective: &random_perspective
  type: random_perspective
  kwargs:
    degrees: 0.0
    translate: 0.1
    scale: 0.5
    shear: 0.0
    perspective: 0.0
    fill_color: 114
    border: [-320, -320]

augment_hsv: &augment_hsv
  type: augment_hsv
  kwargs:
    hgain: 0.015
    sgain: 0.7
    vgain: 0.4
    color_mode: BGR

flip: &flip
  type: flip
  kwargs:
    flip_p: 0.5

to_tensor: &to_tensor
  type: custom_to_tensor
  kwargs:
    norm_image: true

test_resize: &test_resize
  type: keep_ar_resize_max
  kwargs:
    max_size: 640
    padding_type: left_top
    padding_val: 114

dataset:
  train:
    dataset:
      type: coco
      kwargs:
        meta_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_train2017.json
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: /mnt/lustre/share/DSK/datasets/mscoco2017/train2017
            color_mode: BGR
        transformer: [*mosaic, *random_perspective, *augment_hsv, *flip, *to_tensor]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: &batch_size 32  # totle batchsize should be greater 32
  test:
    dataset:
      type: coco
      kwargs:
        meta_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_val2017.json
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: /mnt/lustre/share/DSK/datasets/mscoco2017/val2017
            color_mode: BGR
        transformer: [*test_resize, *to_tensor]
        evaluator:
          type: COCO
          kwargs:
            gt_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_val2017.json
            iou_types: [bbox]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 8
  dataloader:
    type: base
    kwargs:
      num_workers: 8
      alignment: 32
      worker_init: true
      pad_type: batch_pad

trainer: # Required.
  max_epoch: &max_epoch 400             # total epochs for the training
  save_freq: 5
  test_freq: 5
  only_save_latest: true
  optimizer:                 # optimizer = SGD(params,lr=0.01,momentum=0.937,weight_decay=0.0005)
    register_type: yolov6
    type: SGD
    kwargs:
      lr: 0.0000390625
      batch_size: *batch_size
      momentum: &momentum 0.937
      nesterov: true
      weight_decay: 0.0005      # weight_decay = 0.0005 * batch_size / 64
  lr_scheduler:
    lr_register_type: yolov6_base
    warmup_register_type: yolov6_warm_scheduler
    warmup_epochs: 3       # set to be 0 to disable warmup. When warmup,  target_lr = init_lr * total_batch_size
    warmup_bias_lr: 0.1
    warmup_momentum: 0.8
    target_momentum: *momentum
    warmup_type: yolov6_cos
    type: YoloV6CosineLR
    kwargs:
      T_max: *max_epoch
      cos_lr: 0.01

saver:
  save_dir: checkpoints/yolov6_nano
  results_dir: results_dir/yolov6_nano
  auto_resume: false

ema:
  enable: true
  ema_type: exp_v6
  kwargs:
    decay: 0.9999

net:
- name: prev
  type: yolov6_pre
  kwargs:
    depth_multiple: 0.33
    width_multiple: 0.25
    backbone_base_repeats: [1, 6, 12, 18, 6]
    backbone_base_channels: [64, 128, 256, 512, 1024]
    neck_base_repeats: [12, 12, 12, 12]
    neck_base_channels: [256, 128, 128, 256, 256, 512]
- name: backbone
  prev: prev
  type: EfficientRep
  kwargs:
    out_layers: [2, 3, 4]
    out_strides: [8, 16, 32]
    normalize: {'type': 'solo_bn'}
    act_fn: {'type': 'ReLU'}
- name: neck
  prev: backbone
  type: RepPANNeck
  kwargs:
    out_strides: [8, 16, 32]
    normalize: {'type': 'solo_bn'}
    act_fn: {'type': 'ReLU'}
- name: roi_head
  prev: neck
  type: Effidehead
  kwargs:
    num_classes: *num_classes
    anchors: &dense_points 1
    num_layers: 3
    class_activation: 'sigmoid'
    normalize: {'type': 'solo_bn'}
    act_fn: {'type': 'Silu'}
- name: yolox_post
  prev: roi_head
  type: yolox_post
  kwargs:
    num_classes: *num_classes
    use_l1: true
    cfg:
      loc_loss:
        type: iou_loss
        kwargs:
          loss_type: ciou
          loss_weight: 5.0
      cls_loss:
        type: sigmoid_cross_entropy
      obj_loss:
        type: sigmoid_cross_entropy
      anchor_generator:
        type: fcos   # yolox
        kwargs:
          dense_points: *dense_points
          center: false
      roi_supervisor:
        type: ota
        kwargs:
          num_classes: *num_classes
          matcher:
            type: ota
            kwargs:
              num_classes: *num_classes
      roi_predictor:
        type: yolox
        kwargs:
          num_classes: *num_classes
          pre_nms_score_thresh: 0.001
          nms:
            type: naive
            nms_iou_thresh: 0.65
